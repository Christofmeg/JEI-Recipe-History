import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'net.minecraftforge.gradle' version '6.+'
    id 'idea'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id 'com.modrinth.minotaur' version '2.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

archivesBaseName = "${mod_id}-forge-${minecraft_version}"

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', 
			'--existing', file('src/main/resources/')
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
	
	// JEI
	implementation fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    // CONFIGURED
    if (project.hasProperty('configured_version')) {
        implementation fg.deobf("curse.maven:configured-457570:${configured_version}")
    }
    // CATALOGUE
    if (project.hasProperty('catalogue_version')) {
        implementation fg.deobf("curse.maven:catalogue-459701:${catalogue_version}")
    }
	// CONFIGURED
    if (project.hasProperty('forge_configured_version')) {
        implementation fg.deobf("curse.maven:configured-457570:${forge_configured_version}")
    }
	
}

processResources {
    from project(":Common").sourceSets.main.resources

    filesMatching('*.mixins.json') {
        expand "refmap_target": "${mod_id}."
    }
	
	exclude '.cache'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            forge_loader_version_range: forge_loader_version_range,
            mod_license: mod_license,
            issueTrackerURL: issueTrackerURL,
            minecraft_version: minecraft_version,
            forge_minecraft_version_range: forge_minecraft_version_range,
            forge_version: forge_version,
            forge_version_range: forge_version_range,
            catalogueImageIcon: catalogueImageIcon,

            mod_id: mod_id,
            version: version,
            display_name: display_name,
            displayURL: displayURL,
            mod_authors: mod_authors,
            mod_description: mod_description,

            jei_version_range: jei_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar.finalizedBy('reobfJar')

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = file('../../API Tokens/jeirecipehistory.md')
    def projectId = "${cf_id}".toString()
    def mainFile = upload(projectId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file('changelog.md')
    mainFile.addGameVersion('Client', 'Server')
    mainFile.releaseType = "${release_type}"
    "${forge_release_versions}".split(',').each {
        mainFile.addGameVersion("${it}")
    }
    mainFile.addRequirement("jade")
    mainFile.addRequirement("mekanism")
    mainFile.addOptional("catalogue")
    mainFile.addModLoader('Forge')
}

modrinth {
    token = file('../../API Tokens/modrinth.md').text
    projectId = "${modrinth_id}"
    versionName = getArchivesBaseName() + "-" + getVersion()
    versionType = "${release_type}"
    changelog = file('changelog.md').text
    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
    gameVersions = "${forge_release_versions}".split(",") as List<String>
    dependencies {
        required.project "jade"
        required.project "mekanism"
    }
    loaders = "forge".split(",") as List<String>
}